Attribute VB_Name = "ErrorHandling"
'
' File name:            ErrorHandling
'
' Initial Author:       Type your name here
'
' Date Created:     10/13/2006
'
' Description: FILE AUTOMATICALLY GENERATED BY ESRI ERROR HANDLER ADDIN
' DO NOT EDIT OR REMOVE THIS FILE FROM THE PROJECT
'
'
' Entry points:
'       List the public variables and their purposes.
'       List the properties and routines that the module exposes to the rest of the program.
'
' Dependencies:
'       How does this file depend or relate to other files?
'
' Issues:
'       What are unsolved bugs, bottlenecks,
'       possible future enhancements, and
'       descriptions of other issues.
'
' Method:
'       Describe any complex details that make sense on the file level.  This includes explanations
'       of complex algorithms, how different routines within the module interact, and a description
'       of a data structure used in the module.
'
' Updates:
'               None

Option Explicit
'******************************
' Global/Public Definitions
'------------------------------
' Public API Declarations
'------------------------------

'------------------------------
' Public Enums and Constants
'------------------------------

'------------------------------
' Public variables
'------------------------------

'------------------------------
' Public Types
'------------------------------

'------------------------------
' Public loop variables
'------------------------------

'******************************
' Private Definitions
'------------------------------
' Private API declarations
'------------------------------

'------------------------------
' Private Variables
'------------------------------
Dim pErrorLog As New ErrorHandlerUI.ErrorDialog
'------------------------------
'Private Constants and Enums
'------------------------------

'------------------------------
' Private Types
'------------------------------

'------------------------------
' Private loop variables
'------------------------------

'

'

Private Sub DisplayVersion2Dialog(sProcedureName As String, sErrDescription As String)
82:   Beep
83:   MsgBox "An error has occured in the application.   Record the call stack sequence" & vbCrLf & "and the description of the error." & vbCrLf & vbCrLf & _
         "Error Call Stack Sequence " & vbCrLf & vbTab & sProcedureName & vbCrLf & sErrDescription, vbExclamation + vbOKOnly, "Unexpected Program Error"
End Sub

Private Sub DisplayVersion3Dialog(sProcedureName As String, sErrDescription As String, parentHWND As Long, raiseException As Boolean)
88:   Beep
89:   MsgBox "An error has occured in the application.   Record the call stack sequence" & vbCrLf & "and the description of the error." & vbCrLf & vbCrLf & _
         "Error Call Stack Sequence " & vbCrLf & vbTab & sProcedureName & vbCrLf & sErrDescription, vbExclamation + vbOKOnly, "Unexpected Program Error"
End Sub

Private Sub DisplayVersion4Dialog(sProcedureName As String, sErrDescription As String, parentHWND As Long)
94:   pErrorLog.AppendErrorText "Record Call Stack Sequence - Bottom line is error line." & vbCrLf & vbCrLf & vbTab & sProcedureName & vbCrLf & sErrDescription
95:   pErrorLog.Visible = True


End Sub

Public Sub HandleError(ByVal bTopProcedure As Boolean, _
                       ByVal sProcedureName As String, _
                       ByVal lErrNumber As Long, _
                       ByVal sErrSource As String, _
                       ByVal sErrDescription As String, _
                       Optional ByVal version As Long = 1, _
                       Optional ByVal parentHWND As Long = 0, _
                       Optional ByVal reserved1 As Variant = 0, _
                       Optional ByVal reserved2 As Variant = 0, _
                       Optional ByVal reserved3 As Variant = 0)
    ' Generic Error handling Function - This function should be called with
    ' the following Arguments
    '
    ' Boolean    -in-  True if called from a top level procedure - Event / Method / Property
    ' String     -in-  Name of function called from
    ' Long       -in-  Error Number (retrieved from Err object)
    ' String     -in-  Error Source (retrieved from Err object)
    ' String     -in-  Error Description (retrieved from Err object)
    ' Long       -in-  Version of Function (optional Default 1)
    ' parentHWND -in-  Parent Hwnd for error dialogs, NULL is valid
    ' reserved1  -in-
    ' reserved2  -in-
    ' reserved3  -in-
    
    
    ' Clear the error object
126:     Err.Clear

    ' Static variable used to control the call stack formatting
129:     Static entered As Boolean

131:     If (bTopProcedure) Then
        ' Top most procedure in call stack so report error to user
        ' Via a dialog
134:         If (Not entered) Then
135:           sErrDescription = vbCrLf & "Error Number " & vbCrLf & vbTab & CStr(lErrNumber) & vbCrLf & "Description" & vbCrLf & vbTab & sErrDescription & vbCrLf & vbCrLf
136:         End If
137:         entered = False
138:         If (version = 4) Then
139:           DisplayVersion4Dialog sProcedureName, sErrDescription, parentHWND
140:         ElseIf (version = 3) Then
          Dim raiseError As Boolean
142:           DisplayVersion3Dialog sProcedureName, sErrDescription, parentHWND, raiseError
143:           If (raiseError) Then Err.Raise lErrNumber, sErrSource, vbTab & sProcedureName & vbCrLf & sErrDescription
144:         ElseIf (version = 2) Then
145:           DisplayVersion2Dialog sProcedureName, sErrDescription
146:         Else
147:           Beep
148:           MsgBox "An error has occured in the application.   Record the call stack sequence" & vbCrLf & "and the description of the error." & vbCrLf & vbCrLf & _
                 "Error Call Stack Sequence " & vbCrLf & vbTab & sProcedureName & vbCrLf & sErrDescription, vbExclamation + vbOKOnly, "Unexpected Program Error"
150:         End If
151:     Else
        ' An error has occured but we are not at the top of the call stack
        ' so append the callstack and raise another error
154:         If (Not entered) Then sErrDescription = vbCrLf & "Error Number " & vbCrLf & vbTab & CStr(lErrNumber) & vbCrLf & "Description" & vbCrLf & vbTab & sErrDescription & vbCrLf & vbCrLf
155:         entered = True
156:         Err.Raise lErrNumber, sErrSource, vbTab & sProcedureName & vbCrLf & sErrDescription
157:     End If
End Sub

Public Function GetErrorLineNumberString(ByVal lLineNumber As Long) As String
  ' Test the line number if it is non zero create a string
162:   If (lLineNumber <> 0) Then GetErrorLineNumberString = "Line : " & lLineNumber
End Function

